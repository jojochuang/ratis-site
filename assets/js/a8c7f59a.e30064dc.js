"use strict";(self.webpackChunkratis_tmp=self.webpackChunkratis_tmp||[]).push([[2307],{5404:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>c});var i=r(6672);const s={},n=i.createContext(s);function a(e){const t=i.useContext(n);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(n.Provider,{value:t},e.children)}},8360:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"features/read-after-write","title":"Read-After-Write Consistency Support","description":"This feature ensures that a read operation by a client reflects the latest successful write by the same client, even if that write has not yet been fully committed across the entire Raft group. This provides a stronger consistency guarantee for individual client sessions.","source":"@site/docs/features/read-after-write.md","sourceDirName":"features","slug":"/features/read-after-write","permalink":"/ratis-site/docs/features/read-after-write","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/ratis-site/edit/main/docs/features/read-after-write.md","tags":[],"version":"current","frontMatter":{"title":"Read-After-Write Consistency Support"},"sidebar":"tutorialSidebar","previous":{"title":"Ratis-shell CLI","permalink":"/ratis-site/docs/cli"},"next":{"title":"Leader Lease","permalink":"/ratis-site/docs/features/leader-lease"}}');var s=r(3420),n=r(5404);const a={title:"Read-After-Write Consistency Support"},c="Read-After-Write Consistency Support",o={},l=[{value:"Interface Methods",id:"interface-methods",level:2},{value:"Asynchronous API (<code>org.apache.ratis.client.api.AsyncApi</code>)",id:"asynchronous-api-orgapacheratisclientapiasyncapi",level:3},{value:"Blocking API (<code>org.apache.ratis.client.api.BlockingApi</code>)",id:"blocking-api-orgapacheratisclientapiblockingapi",level:3},{value:"Configuration",id:"configuration",level:2},{value:"<code>RaftServerConfigKeys.ReadAfterWriteConsistent</code>",id:"raftserverconfigkeysreadafterwriteconsistent",level:3},{value:"References",id:"references",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"read-after-write-consistency-support",children:"Read-After-Write Consistency Support"})}),"\n",(0,s.jsxs)(t.p,{children:["This feature ensures that a read operation by a client reflects the latest successful write by the ",(0,s.jsx)(t.em,{children:"same"})," client, even if that write has not yet been fully committed across the entire Raft group. This provides a stronger consistency guarantee for individual client sessions."]}),"\n",(0,s.jsx)(t.h2,{id:"interface-methods",children:"Interface Methods"}),"\n",(0,s.jsx)(t.p,{children:"To utilize read-after-write consistency, the following methods are available in the client APIs:"}),"\n",(0,s.jsxs)(t.h3,{id:"asynchronous-api-orgapacheratisclientapiasyncapi",children:["Asynchronous API (",(0,s.jsx)(t.code,{children:"org.apache.ratis.client.api.AsyncApi"}),")"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"CompletableFuture sendReadAfterWrite(Message message);\n"})}),"\n",(0,s.jsx)(t.p,{children:"Sends the given readonly message asynchronously to the Raft service. The result will be read-after-write consistent, i.e., reflecting the latest successful write by the same client."}),"\n",(0,s.jsxs)(t.h3,{id:"blocking-api-orgapacheratisclientapiblockingapi",children:["Blocking API (",(0,s.jsx)(t.code,{children:"org.apache.ratis.client.api.BlockingApi"}),")"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"RaftClientReply sendReadAfterWrite(Message message) throws IOException;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Sends the given readonly message to the Raft service. The result will be read-after-write consistent, i.e., reflecting the latest successful write by the same client."}),"\n",(0,s.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(t.p,{children:["To configure the read-after-write consistency feature, the following property can be set in ",(0,s.jsx)(t.code,{children:"RaftServerConfigKeys"}),":"]}),"\n",(0,s.jsx)(t.h3,{id:"raftserverconfigkeysreadafterwriteconsistent",children:(0,s.jsx)(t.code,{children:"RaftServerConfigKeys.ReadAfterWriteConsistent"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Property"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Default"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"raft.server.read.read-after-write-consistent.write-index-cache.expiry-time"})}),(0,s.jsxs)(t.td,{children:["Expiration time for the server's memorized last written index of a specific client. Must be larger than ",(0,s.jsx)(t.code,{children:"Read.TIMEOUT_DEFAULT"}),"."]}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"TimeDuration"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"60s"})})]})})]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Methods to set/get this property:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"static TimeDuration writeIndexCacheExpiryTime(RaftProperties properties);\nstatic void setWriteIndexCacheExpiryTime(RaftProperties properties, TimeDuration expiryTime);\n"})}),"\n",(0,s.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://issues.apache.org/jira/browse/RATIS-1882",children:"RATIS-1882"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);