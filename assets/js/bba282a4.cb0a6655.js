"use strict";(self.webpackChunkratis_tmp=self.webpackChunkratis_tmp||[]).push([[9832],{193:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"developer-guide/statemachine-developer-guide","title":"Advanced StateMachine APIs","description":"This guide explores the advanced, optional APIs of the StateMachine interface. Implementing these APIs gives you fine-grained control over data handling, event notifications, and multi-raft management. For a guide to the essential, core methods, see the \\"StateMachine Core API\\" guide.","source":"@site/docs/developer-guide/statemachine-developer-guide.md","sourceDirName":"developer-guide","slug":"/developer-guide/statemachine-developer-guide","permalink":"/ratis-site/docs/developer-guide/statemachine-developer-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/ratis-site/edit/main/docs/developer-guide/statemachine-developer-guide.md","tags":[],"version":"current","frontMatter":{"title":"Advanced StateMachine APIs"},"sidebar":"tutorialSidebar","previous":{"title":"Streaming Configuration","permalink":"/ratis-site/docs/developer-guide/streaming-configuration"},"next":{"title":"StateMachine Core API by Example","permalink":"/ratis-site/docs/developer-guide/statemachine-core-api"}}');var i=n(3420),r=n(5404);const l={title:"Advanced StateMachine APIs"},o="Advanced StateMachine APIs: A Developer Guide",s={},c=[{value:"DataApi: For High-Performance Data Handling",id:"dataapi-for-high-performance-data-handling",level:2},{value:"Example: A File Store StateMachine",id:"example-a-file-store-statemachine",level:3},{value:"EventApi: Reacting to Cluster Events",id:"eventapi-reacting-to-cluster-events",level:2},{value:"Example: Logging Leader Changes",id:"example-logging-leader-changes",level:3},{value:"LeaderEventApi: Leader-Specific Logic",id:"leadereventapi-leader-specific-logic",level:2},{value:"Example: Monitoring Slow Followers",id:"example-monitoring-slow-followers",level:3},{value:"FollowerEventApi: Follower-Specific Logic",id:"followereventapi-follower-specific-logic",level:2},{value:"Example: Handling Leader Timeouts",id:"example-handling-leader-timeouts",level:3},{value:"Registry: Supporting Multiple Raft Groups",id:"registry-supporting-multiple-raft-groups",level:2},{value:"Example: A Multi-Tenant StateMachine",id:"example-a-multi-tenant-statemachine",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"advanced-statemachine-apis-a-developer-guide",children:"Advanced StateMachine APIs: A Developer Guide"})}),"\n",(0,i.jsxs)(t.p,{children:["This guide explores the advanced, optional APIs of the ",(0,i.jsx)(t.code,{children:"StateMachine"}),' interface. Implementing these APIs gives you fine-grained control over data handling, event notifications, and multi-raft management. For a guide to the essential, core methods, see the "StateMachine Core API" guide.']}),"\n",(0,i.jsx)(t.h2,{id:"dataapi-for-high-performance-data-handling",children:"DataApi: For High-Performance Data Handling"}),"\n",(0,i.jsxs)(t.p,{children:["Implement the ",(0,i.jsx)(t.code,{children:"DataApi"})," interface when you need to manage state machine data directly, outside of the Raft log. This is essential for performance-critical applications that require zero-copy data streaming."]}),"\n",(0,i.jsx)(t.h3,{id:"example-a-file-store-statemachine",children:"Example: A File Store StateMachine"}),"\n",(0,i.jsxs)(t.p,{children:["Let's imagine a state machine that stores large files. Instead of writing the entire file content to the Raft log, we can use the ",(0,i.jsx)(t.code,{children:"DataApi"})," to stream the file directly to a separate storage location."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'public class FileStoreStateMachine extends BaseStateMachine implements StateMachine.DataApi {\n\n    private final File storageDir = new File("/path/to/your/storage");\n\n    @Override\n    public CompletableFuture<DataStream> stream(RaftClientRequest request) {\n        // The request message contains the file name\n        String fileName = request.getMessage().getContent().toStringUtf8();\n        File file = new File(storageDir, fileName);\n\n        try {\n            // Create a DataChannel to write the file to\n            final FileChannel channel = new FileOutputStream(file).getChannel();\n            final DataStream stream = () -> channel;\n            return CompletableFuture.completedFuture(stream);\n        } catch (IOException e) {\n            return CompletableFuture.failedFuture(e);\n        }\n    }\n\n    @Override\n    public CompletableFuture<?> link(DataStream stream, LogEntryProto entry) {\n        // The stream is now complete. We can close the channel.\n        try {\n            stream.getDataChannel().close();\n        } catch (IOException e) {\n            return CompletableFuture.failedFuture(e);\n        }\n        return CompletableFuture.completedFuture(null);\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"eventapi-reacting-to-cluster-events",children:"EventApi: Reacting to Cluster Events"}),"\n",(0,i.jsxs)(t.p,{children:["Implement ",(0,i.jsx)(t.code,{children:"EventApi"})," to receive notifications about general lifecycle events within the Raft group."]}),"\n",(0,i.jsx)(t.h3,{id:"example-logging-leader-changes",children:"Example: Logging Leader Changes"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'public class MyStateMachine extends BaseStateMachine implements StateMachine.EventApi {\n\n    @Override\n    public void notifyLeaderChanged(RaftGroupMemberId groupMemberId, RaftPeerId newLeaderId) {\n        System.out.println("Leader changed for group " + groupMemberId + ". New leader is " + newLeaderId);\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"leadereventapi-leader-specific-logic",children:"LeaderEventApi: Leader-Specific Logic"}),"\n",(0,i.jsxs)(t.p,{children:["Implement ",(0,i.jsx)(t.code,{children:"LeaderEventApi"})," to execute logic that should only run when the server is the leader."]}),"\n",(0,i.jsx)(t.h3,{id:"example-monitoring-slow-followers",children:"Example: Monitoring Slow Followers"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'public class MyStateMachine extends BaseStateMachine implements StateMachine.LeaderEventApi {\n\n    @Override\n    public void notifyFollowerSlowness(RoleInfoProto leaderInfo, RaftPeer slowFollower) {\n        System.err.println("Warning: Follower " + slowFollower.getId() + " is slow!");\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"followereventapi-follower-specific-logic",children:"FollowerEventApi: Follower-Specific Logic"}),"\n",(0,i.jsxs)(t.p,{children:["Implement ",(0,i.jsx)(t.code,{children:"FollowerEventApi"})," for follower-only event handling."]}),"\n",(0,i.jsx)(t.h3,{id:"example-handling-leader-timeouts",children:"Example: Handling Leader Timeouts"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'public class MyStateMachine extends BaseStateMachine implements StateMachine.FollowerEventApi {\n\n    @Override\n    public void notifyExtendedNoLeader(RoleInfoProto roleInfoProto) {\n        System.err.println("Warning: No leader elected for an extended period of time.");\n        // You could trigger an alert here\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"registry-supporting-multiple-raft-groups",children:"Registry: Supporting Multiple Raft Groups"}),"\n",(0,i.jsxs)(t.p,{children:["If you need to run multiple, independent Raft groups (and thus multiple state machines) within a single server process, you can implement the ",(0,i.jsx)(t.code,{children:"StateMachine.Registry"})," interface."]}),"\n",(0,i.jsx)(t.h3,{id:"example-a-multi-tenant-statemachine",children:"Example: A Multi-Tenant StateMachine"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"public class MultiTenantStateMachineRegistry implements StateMachine.Registry {\n\n    private final Map<RaftGroupId, StateMachine> stateMachines = new ConcurrentHashMap<>();\n\n    @Override\n    public StateMachine apply(RaftGroupId groupId) {\n        return stateMachines.computeIfAbsent(groupId, id -> {\n            // Create a new state machine for the given group\n            // You might have different state machine implementations for different groups\n            return new KeyValueStateMachine();\n        });\n    }\n}\n"})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},5404:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var a=n(6672);const i={},r=a.createContext(i);function l(e){const t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);