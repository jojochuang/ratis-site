"use strict";(self.webpackChunkratis_tmp=self.webpackChunkratis_tmp||[]).push([[60],{5017:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"concepts/log-appender","title":"Log Appender","description":"In Ratis, the LogAppenderDefault is the default implementation of the LogAppender interface, which is a core component running on the Raft leader. Its primary responsibility is to ensure that all followers in the Raft group have an up-to-date copy of the leader\'s log. It achieves this through a continuous process of sending AppendEntries RPCs and, when necessary, installing snapshots.","source":"@site/docs/concepts/log-appender.md","sourceDirName":"concepts","slug":"/concepts/log-appender","permalink":"/ratis-site/docs/concepts/log-appender","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/ratis-site/edit/main/docs/concepts/log-appender.md","tags":[],"version":"current","frontMatter":{"title":"Log Appender"},"sidebar":"tutorialSidebar","previous":{"title":"StateMachine Storage","permalink":"/ratis-site/docs/concepts/statemachine-storage"},"next":{"title":"Ratis-shell CLI","permalink":"/ratis-site/docs/cli"}}');var i=s(3420),o=s(5404);const r={title:"Log Appender"},l="Log Appender",a={},d=[{value:"Key Responsibilities and Mechanisms",id:"key-responsibilities-and-mechanisms",level:2},{value:"1. Log Replication (AppendEntries RPCs)",id:"1-log-replication-appendentries-rpcs",level:3},{value:"2. Snapshot Installation",id:"2-snapshot-installation",level:3},{value:"3. Heartbeats",id:"3-heartbeats",level:3},{value:"4. Error Handling",id:"4-error-handling",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"log-appender",children:"Log Appender"})}),"\n",(0,i.jsxs)(n.p,{children:["In Ratis, the ",(0,i.jsx)(n.code,{children:"LogAppenderDefault"})," is the default implementation of the ",(0,i.jsx)(n.code,{children:"LogAppender"})," interface, which is a core component running on the Raft leader. Its primary responsibility is to ensure that all followers in the Raft group have an up-to-date copy of the leader's log. It achieves this through a continuous process of sending ",(0,i.jsx)(n.code,{children:"AppendEntries"})," RPCs and, when necessary, installing snapshots."]}),"\n",(0,i.jsx)(n.h2,{id:"key-responsibilities-and-mechanisms",children:"Key Responsibilities and Mechanisms"}),"\n",(0,i.jsx)(n.h3,{id:"1-log-replication-appendentries-rpcs",children:"1. Log Replication (AppendEntries RPCs)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"LogAppenderDefault"})," continuously sends ",(0,i.jsx)(n.code,{children:"AppendEntries"})," RPCs to its assigned follower. These RPCs contain new log entries that the leader has committed."]}),"\n",(0,i.jsxs)(n.li,{children:["It manages the ",(0,i.jsx)(n.code,{children:"nextIndex"})," for each follower, which is the index of the next log entry the leader expects to send to that follower."]}),"\n",(0,i.jsxs)(n.li,{children:["It handles the responses from followers, updating their ",(0,i.jsx)(n.code,{children:"matchIndex"})," (the highest log entry known to be replicated on the follower) and ",(0,i.jsx)(n.code,{children:"nextIndex"})," accordingly."]}),"\n",(0,i.jsxs)(n.li,{children:["It implements retry logic for ",(0,i.jsx)(n.code,{children:"AppendEntries"})," RPCs in case of network issues or follower unresponsiveness."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-snapshot-installation",children:"2. Snapshot Installation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If a follower is significantly behind the leader (i.e., its ",(0,i.jsx)(n.code,{children:"nextIndex"})," is less than the leader's ",(0,i.jsx)(n.code,{children:"logStartIndex"}),"), the ",(0,i.jsx)(n.code,{children:"LogAppenderDefault"})," will initiate an ",(0,i.jsx)(n.code,{children:"InstallSnapshot"})," RPC."]}),"\n",(0,i.jsx)(n.li,{children:"This mechanism allows the follower to quickly catch up by receiving a complete snapshot of the leader's state machine, rather than replaying a very long sequence of log entries."}),"\n",(0,i.jsxs)(n.li,{children:["It handles the various responses from the follower during snapshot installation, such as ",(0,i.jsx)(n.code,{children:"SUCCESS"}),", ",(0,i.jsx)(n.code,{children:"NOT_LEADER"}),", ",(0,i.jsx)(n.code,{children:"SNAPSHOT_UNAVAILABLE"}),", etc."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-heartbeats",children:"3. Heartbeats"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Even when there are no new log entries to append, the ",(0,i.jsx)(n.code,{children:"LogAppenderDefault"})," sends periodic heartbeats (empty ",(0,i.jsx)(n.code,{children:"AppendEntries"})," RPCs) to followers."]}),"\n",(0,i.jsxs)(n.li,{children:["Heartbeats serve two main purposes:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"To maintain leadership: They prevent followers from timing out and initiating new elections."}),"\n",(0,i.jsx)(n.li,{children:"To update commit index: They allow the leader to inform followers of its latest commit index, even if no new entries have been appended."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4-error-handling",children:"4. Error Handling"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"LogAppenderDefault"})," includes mechanisms to handle various errors, such as network exceptions, inconsistencies in log states between leader and follower, and cases where the leader discovers it is no longer the leader."]}),"\n",(0,i.jsxs)(n.li,{children:["It can adjust the ",(0,i.jsx)(n.code,{children:"nextIndex"})," for a follower if an inconsistency is detected, allowing the follower to re-synchronize its log with the leader."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In essence, ",(0,i.jsx)(n.code,{children:"LogAppenderDefault"})," is the workhorse that keeps the Ratis cluster's state consistent across all its members, ensuring high availability and data integrity."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},5404:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var t=s(6672);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);