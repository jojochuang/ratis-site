"use strict";(self.webpackChunkratis_tmp=self.webpackChunkratis_tmp||[]).push([[7612],{5404:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>t});var r=a(6672);const i={},l=r.createContext(i);function o(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(l.Provider,{value:n},e.children)}},9753:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>t,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"developer-guide/linearizable-read","title":"Linearizable Read from Followers","description":"Ratis supports linearizable reads, which allows clients to read the most up-to-date committed data from any server in the cluster, including followers. This can significantly improve read throughput and reduce the load on the leader.","source":"@site/docs/developer-guide/linearizable-read.md","sourceDirName":"developer-guide","slug":"/developer-guide/linearizable-read","permalink":"/ratis-site/docs/developer-guide/linearizable-read","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/ratis-site/edit/main/docs/developer-guide/linearizable-read.md","tags":[],"version":"current","frontMatter":{"title":"Linearizable Read from Followers"},"sidebar":"tutorialSidebar","previous":{"title":"Listeners (Non-Voting Members)","permalink":"/ratis-site/docs/developer-guide/listeners"},"next":{"title":"Security Developer Guide","permalink":"/ratis-site/docs/developer-guide/security"}}');var i=a(3420),l=a(5404);const o={title:"Linearizable Read from Followers"},t="Linearizable Read from Followers Developer Guide",s={},d=[{value:"Enabling Linearizable Reads",id:"enabling-linearizable-reads",level:2},{value:"Sending Read Requests",id:"sending-read-requests",level:2},{value:"Asynchronous Read",id:"asynchronous-read",level:3},{value:"Blocking Read",id:"blocking-read",level:3},{value:"Non-Linearizable Reads",id:"non-linearizable-reads",level:2},{value:"Asynchronous Non-Linearizable Read",id:"asynchronous-non-linearizable-read",level:3},{value:"Blocking Non-Linearizable Read",id:"blocking-non-linearizable-read",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"linearizable-read-from-followers-developer-guide",children:"Linearizable Read from Followers Developer Guide"})}),"\n",(0,i.jsx)(n.p,{children:"Ratis supports linearizable reads, which allows clients to read the most up-to-date committed data from any server in the cluster, including followers. This can significantly improve read throughput and reduce the load on the leader."}),"\n",(0,i.jsx)(n.h2,{id:"enabling-linearizable-reads",children:"Enabling Linearizable Reads"}),"\n",(0,i.jsxs)(n.p,{children:["To enable linearizable reads, you must set the ",(0,i.jsx)(n.code,{children:"raft.server.read.option"})," property to ",(0,i.jsx)(n.code,{children:"LINEARIZABLE"})," in your ",(0,i.jsx)(n.code,{children:"RaftProperties"})," when creating the ",(0,i.jsx)(n.code,{children:"RaftServer"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"import org.apache.ratis.server.RaftServerConfigKeys;\nimport org.apache.ratis.conf.RaftProperties;\n\n// Create a RaftProperties object\nRaftProperties properties = new RaftProperties();\n\n// Enable linearizable reads\nRaftServerConfigKeys.Read.setOption(properties, RaftServerConfigKeys.Read.Option.LINEARIZABLE);\n\n// Build your RaftServer with the updated properties\nRaftServer server = RaftServer.newBuilder()\n    // ... other builder configurations\n    .setProperties(properties)\n    .build();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"sending-read-requests",children:"Sending Read Requests"}),"\n",(0,i.jsxs)(n.p,{children:["Once linearizable reads are enabled on the server, you can send read requests from the client using the standard ",(0,i.jsx)(n.code,{children:"sendReadOnly"})," method. Ratis will automatically route the request to an appropriate server (leader or follower) to ensure linearizable consistency."]}),"\n",(0,i.jsx)(n.h3,{id:"asynchronous-read",children:"Asynchronous Read"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import org.apache.ratis.client.api.AsyncApi;\nimport org.apache.ratis.protocol.Message;\nimport org.apache.ratis.protocol.RaftClientReply;\n\nimport java.util.concurrent.CompletableFuture;\n\n// ...\n\nAsyncApi asyncApi = client.async();\nCompletableFuture<RaftClientReply> replyFuture = asyncApi.sendReadOnly(Message.valueOf("your-read-only-message"));\n'})}),"\n",(0,i.jsx)(n.h3,{id:"blocking-read",children:"Blocking Read"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import org.apache.ratis.client.api.BlockingApi;\nimport org.apache.ratis.protocol.Message;\nimport org.apache.ratis.protocol.RaftClientReply;\n\nimport java.io.IOException;\n\n// ...\n\nBlockingApi blockingApi = client.io();\ntry {\n    RaftClientReply reply = blockingApi.sendReadOnly(Message.valueOf("your-read-only-message"));\n    // process reply\n} catch (IOException e) {\n    // handle exception\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"non-linearizable-reads",children:"Non-Linearizable Reads"}),"\n",(0,i.jsx)(n.p,{children:"Even with linearizable reads enabled, you can still opt for a non-linearizable read if you do not require the strongest consistency guarantee. This can be useful for latency-sensitive applications where a slightly stale read is acceptable."}),"\n",(0,i.jsxs)(n.p,{children:["To perform a non-linearizable read, use the ",(0,i.jsx)(n.code,{children:"sendReadOnlyNonLinearizable"})," method."]}),"\n",(0,i.jsx)(n.h3,{id:"asynchronous-non-linearizable-read",children:"Asynchronous Non-Linearizable Read"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'CompletableFuture<RaftClientReply> replyFuture = asyncApi.sendReadOnlyNonLinearizable(Message.valueOf("your-read-only-message"));\n'})}),"\n",(0,i.jsx)(n.h3,{id:"blocking-non-linearizable-read",children:"Blocking Non-Linearizable Read"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'try {\n    RaftClientReply reply = blockingApi.sendReadOnlyNonLinearizable(Message.valueOf("your-read-only-message"));\n    // process reply\n} catch (IOException e) {\n    // handle exception\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);