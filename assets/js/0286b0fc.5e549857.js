"use strict";(self.webpackChunkratis_tmp=self.webpackChunkratis_tmp||[]).push([[4500],{4519:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>p,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"developer-guide/group-management","title":"Group Management","description":"The GroupManagementApi provides a powerful interface for dynamically managing Raft groups on a Ratis server. This guide explains how to use this API to add, remove, and inspect Raft groups.","source":"@site/docs/developer-guide/group-management.md","sourceDirName":"developer-guide","slug":"/developer-guide/group-management","permalink":"/ratis-site/docs/developer-guide/group-management","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/ratis-site/edit/main/docs/developer-guide/group-management.md","tags":[],"version":"current","frontMatter":{"title":"Group Management"},"sidebar":"tutorialSidebar","previous":{"title":"Watch Requests","permalink":"/ratis-site/docs/developer-guide/watch-requests"},"next":{"title":"Snapshot Management API","permalink":"/ratis-site/docs/developer-guide/snapshot-management-api"}}');var o=r(3420),a=r(5404);const i={title:"Group Management"},p="Group Management Developer Guide",s={},d=[{value:"Getting the <code>GroupManagementApi</code>",id:"getting-the-groupmanagementapi",level:2},{value:"Adding a New Group",id:"adding-a-new-group",level:2},{value:"Removing a Group",id:"removing-a-group",level:2},{value:"Listing and Inspecting Groups",id:"listing-and-inspecting-groups",level:2},{value:"Listing Groups",id:"listing-groups",level:3},{value:"Getting Group Info",id:"getting-group-info",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"group-management-developer-guide",children:"Group Management Developer Guide"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"GroupManagementApi"})," provides a powerful interface for dynamically managing Raft groups on a Ratis server. This guide explains how to use this API to add, remove, and inspect Raft groups."]}),"\n",(0,o.jsxs)(n.h2,{id:"getting-the-groupmanagementapi",children:["Getting the ",(0,o.jsx)(n.code,{children:"GroupManagementApi"})]}),"\n",(0,o.jsxs)(n.p,{children:["To get an instance of the ",(0,o.jsx)(n.code,{children:"GroupManagementApi"}),", you need to have a ",(0,o.jsx)(n.code,{children:"RaftClient"})," and the ",(0,o.jsx)(n.code,{children:"RaftPeerId"})," of the server you want to manage."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import org.apache.ratis.client.RaftClient;\nimport org.apache.ratis.client.api.GroupManagementApi;\nimport org.apache.ratis.protocol.RaftPeerId;\n\n// ...\n\nRaftClient client = ...; // Your RaftClient instance\nRaftPeerId serverId = ...; // The ID of the server to manage\n\nGroupManagementApi groupManager = client.getGroupManagementApi(serverId);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"adding-a-new-group",children:"Adding a New Group"}),"\n",(0,o.jsxs)(n.p,{children:["You can add a new Raft group to a server using the ",(0,o.jsx)(n.code,{children:"add"})," method. This is useful for dynamically creating new replication groups without restarting the server."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'import org.apache.ratis.protocol.RaftGroup;\nimport org.apache.ratis.protocol.RaftGroupId;\nimport org.apache.ratis.protocol.RaftPeer;\n\n// ...\n\nRaftGroupId groupId = RaftGroupId.randomId();\nRaftPeer[] peers = ...; // Define the peers in the new group\nRaftGroup newGroup = RaftGroup.valueOf(groupId, peers);\n\ntry {\n    RaftClientReply reply = groupManager.add(newGroup);\n    if (reply.isSuccess()) {\n        System.out.println("Successfully added new group: " + groupId);\n    }\n} catch (IOException e) {\n    // Handle exception\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["By default, the ",(0,o.jsx)(n.code,{children:"add"})," method will format the storage for the new group. You can prevent this by passing ",(0,o.jsx)(n.code,{children:"false"})," as the second argument."]}),"\n",(0,o.jsx)(n.h2,{id:"removing-a-group",children:"Removing a Group"}),"\n",(0,o.jsxs)(n.p,{children:["To remove a group, you can use the ",(0,o.jsx)(n.code,{children:"remove"})," method. You can also control whether the group's data directory is deleted or renamed."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'import org.apache.ratis.protocol.RaftGroupId;\n\n// ...\n\nRaftGroupId groupIdToRemove = ...; // The ID of the group to remove\n\ntry {\n    RaftClientReply reply = groupManager.remove(groupIdToRemove, true, false); // Delete the directory\n    if (reply.isSuccess()) {\n        System.out.println("Successfully removed group: " + groupIdToRemove);\n    }\n} catch (IOException e) {\n    // Handle exception\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"listing-and-inspecting-groups",children:"Listing and Inspecting Groups"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"GroupManagementApi"})," also provides methods for listing all groups on a server and getting detailed information about a specific group."]}),"\n",(0,o.jsx)(n.h3,{id:"listing-groups",children:"Listing Groups"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'import org.apache.ratis.protocol.GroupListReply;\n\n// ...\n\ntry {\n    GroupListReply reply = groupManager.list();\n    if (reply.isSuccess()) {\n        System.out.println("Groups on server: " + reply.getGroupIds());\n    }\n} catch (IOException e) {\n    // Handle exception\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"getting-group-info",children:"Getting Group Info"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'import org.apache.ratis.protocol.GroupInfoReply;\nimport org.apache.ratis.protocol.RaftGroupId;\n\n// ...\n\nRaftGroupId groupIdToInspect = ...; // The ID of the group to inspect\n\ntry {\n    GroupInfoReply reply = groupManager.info(groupIdToInspect);\n    if (reply.isSuccess()) {\n        System.out.println("Group info: " + reply.getGroup());\n        System.out.println("Role: " + reply.getRole());\n        System.out.println("Is leader: " + reply.isLeader());\n    }\n} catch (IOException e) {\n    // Handle exception\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},5404:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>p});var t=r(6672);const o={},a=t.createContext(o);function i(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function p(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);