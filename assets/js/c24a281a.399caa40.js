"use strict";(self.webpackChunkratis_tmp=self.webpackChunkratis_tmp||[]).push([[8901],{5161:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"developer-guide/listeners","title":"Listeners (Non-Voting Members)","description":"Terminology Note: In Ratis, the term listener is used to describe what is more broadly known as a learner in the Raft protocol literature. Their functionality and purpose are identical.","source":"@site/docs/developer-guide/listeners.md","sourceDirName":"developer-guide","slug":"/developer-guide/listeners","permalink":"/ratis-site/docs/developer-guide/listeners","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/ratis-site/edit/main/docs/developer-guide/listeners.md","tags":[],"version":"current","frontMatter":{"title":"Listeners (Non-Voting Members)"},"sidebar":"tutorialSidebar","previous":{"title":"StateMachine Core API by Example","permalink":"/ratis-site/docs/developer-guide/statemachine-core-api"},"next":{"title":"Linearizable Read from Followers","permalink":"/ratis-site/docs/developer-guide/linearizable-read"}}');var i=n(3420),s=n(5404);const o={title:"Listeners (Non-Voting Members)"},a="Listeners (Non-Voting Members) Developer Guide",l={},d=[{value:"Adding a Listener",id:"adding-a-listener",level:2},{value:"Identifying Listeners",id:"identifying-listeners",level:2},{value:"Behavior of Listeners",id:"behavior-of-listeners",level:2}];function c(e){const t={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"listeners-non-voting-members-developer-guide",children:"Listeners (Non-Voting Members) Developer Guide"})}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Terminology Note:"})," In Ratis, the term ",(0,i.jsx)(t.strong,{children:"listener"})," is used to describe what is more broadly known as a ",(0,i.jsx)(t.strong,{children:"learner"})," in the Raft protocol literature. Their functionality and purpose are identical."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["In Ratis, a non-voting member is referred to as a ",(0,i.jsx)(t.strong,{children:"listener"}),". Listeners receive all the committed log entries from the leader, but they do not participate in the leader election process or the log commitment process. This makes them useful for tasks such as:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Read-only replicas:"})," Listeners can serve stale reads without impacting the write performance of the cluster."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Data replication to remote sites:"})," You can use listeners to replicate data to a remote data center for disaster recovery purposes without affecting the latency of the main cluster."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Analytics and reporting:"})," Listeners can be used to run analytics queries on the replicated data without putting any load on the voting members."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"adding-a-listener",children:"Adding a Listener"}),"\n",(0,i.jsxs)(t.p,{children:["You can add a listener to a Raft group by using the ",(0,i.jsx)(t.code,{children:"setConfiguration"})," method in the ",(0,i.jsx)(t.code,{children:"AdminApi"}),". This method takes two lists of peers: one for the regular voting members and one for the listeners."]}),"\n",(0,i.jsx)(t.p,{children:"Here is an example of how to add a listener to a Raft group:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'import org.apache.ratis.client.api.AdminApi;\nimport org.apache.ratis.protocol.RaftClientReply;\nimport org.apache.ratis.protocol.RaftPeer;\n\nimport java.io.IOException;\nimport java.util.List;\n\n// ...\n\nAdminApi adminApi = client.admin();\n\n// Get the current list of voting members\nList<RaftPeer> votingPeers = ...;\n\n// Create a new peer to be the listener\nRaftPeer listenerPeer = RaftPeer.newBuilder()\n    .setId("listener-1")\n    .setAddress("localhost:9876")\n    .build();\n\n// Create a new list of listeners\nList<RaftPeer> listeners = List.of(listenerPeer);\n\ntry {\n    RaftClientReply reply = adminApi.setConfiguration(votingPeers, listeners);\n    if (reply.isSuccess()) {\n        System.out.println("Successfully added listener to the cluster.");\n    } else {\n        System.err.println("Failed to add listener: " + reply.getException());\n    }\n} catch (IOException e) {\n    e.printStackTrace();\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"identifying-listeners",children:"Identifying Listeners"}),"\n",(0,i.jsxs)(t.p,{children:["You can identify a listener by checking its ",(0,i.jsx)(t.code,{children:"startupRole"}),". The ",(0,i.jsx)(t.code,{children:"RaftPeer"})," class has a ",(0,i.jsx)(t.code,{children:"getStartupRole()"})," method that returns a ",(0,i.jsx)(t.code,{children:"RaftPeerRole"})," enum. You can use this to check if a peer is a ",(0,i.jsx)(t.code,{children:"LISTENER"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'import org.apache.ratis.protocol.RaftPeer;\nimport org.apache.ratis.protocol.RaftPeerRole;\n\n// ...\n\nif (peer.getStartupRole() == RaftPeerRole.LISTENER) {\n    System.out.println(peer.getId() + " is a listener.");\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"behavior-of-listeners",children:"Behavior of Listeners"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"No Voting Power:"})," Listeners do not participate in leader elections and do not have a vote."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Log Replication:"})," They receive all committed log entries from the leader, just like followers."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"No Commitment:"})," They do not contribute to the commitment of log entries. The leader only needs a majority of voting members to commit an entry."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Dynamic Configuration:"})," Listeners can be promoted to followers (and vice-versa) by using the ",(0,i.jsx)(t.code,{children:"setConfiguration"})," API to move them between the ",(0,i.jsx)(t.code,{children:"serversInNewConf"})," and ",(0,i.jsx)(t.code,{children:"listenersInNewConf"})," lists."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},5404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var r=n(6672);const i={},s=r.createContext(i);function o(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);