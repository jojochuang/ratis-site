"use strict";(self.webpackChunkratis_tmp=self.webpackChunkratis_tmp||[]).push([[3081],{4626:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"developer-guide/security","title":"Security Developer Guide","description":"This guide provides a comprehensive overview of the security features in Ratis and how to configure them. By default, Ratis does not provide a secure environment. It is up to the application to either run Ratis in a trusted, private network or to enable the security features described below.","source":"@site/docs/developer-guide/security.md","sourceDirName":"developer-guide","slug":"/developer-guide/security","permalink":"/ratis-site/docs/developer-guide/security","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/ratis-site/edit/main/docs/developer-guide/security.md","tags":[],"version":"current","frontMatter":{"title":"Security Developer Guide"},"sidebar":"tutorialSidebar","previous":{"title":"Linearizable Read from Followers","permalink":"/ratis-site/docs/developer-guide/linearizable-read"},"next":{"title":"Watch Requests","permalink":"/ratis-site/docs/developer-guide/watch-requests"}}');var i=r(4848),s=r(8453);const o={title:"Security Developer Guide"},a="Ratis Security Developer Guide",c={},l=[{value:"TLS/SSL Encryption",id:"tlsssl-encryption",level:2},{value:"Core Concepts",id:"core-concepts",level:3},{value:"Configuring TLS for gRPC",id:"configuring-tls-for-grpc",level:3},{value:"1. Creating a <code>GrpcTlsConfig</code>",id:"1-creating-a-grpctlsconfig",level:4},{value:"2. Setting the <code>GrpcTlsConfig</code>",id:"2-setting-the-grpctlsconfig",level:4},{value:"Configuring TLS for the Netty DataStream",id:"configuring-tls-for-the-netty-datastream",level:3},{value:"Mutual TLS (mTLS)",id:"mutual-tls-mtls",level:3},{value:"Configuration Properties",id:"configuration-properties",level:2},{value:"Pluggable Security Architecture",id:"pluggable-security-architecture",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"ratis-security-developer-guide",children:"Ratis Security Developer Guide"})}),"\n",(0,i.jsx)(t.p,{children:"This guide provides a comprehensive overview of the security features in Ratis and how to configure them. By default, Ratis does not provide a secure environment. It is up to the application to either run Ratis in a trusted, private network or to enable the security features described below."}),"\n",(0,i.jsx)(t.h2,{id:"tlsssl-encryption",children:"TLS/SSL Encryption"}),"\n",(0,i.jsx)(t.p,{children:"Ratis uses TLS/SSL to secure communication between servers and between clients and servers. You can configure TLS for both the gRPC and Netty data stream transports."}),"\n",(0,i.jsx)(t.h3,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:"TlsConf"})}),": The base class for all TLS configuration in Ratis. It can be configured with ",(0,i.jsx)(t.code,{children:"KeyManager"})," and ",(0,i.jsx)(t.code,{children:"TrustManager"})," objects, or with file-based certificates and private keys."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:"GrpcTlsConfig"})}),": A subclass of ",(0,i.jsx)(t.code,{children:"TlsConf"})," that provides a more convenient way to configure TLS for the gRPC transport."]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"configuring-tls-for-grpc",children:"Configuring TLS for gRPC"}),"\n",(0,i.jsxs)(t.p,{children:["To enable TLS for the gRPC transport, you need to create a ",(0,i.jsx)(t.code,{children:"GrpcTlsConfig"})," object and set it on a ",(0,i.jsx)(t.code,{children:"Parameters"})," object. This ",(0,i.jsx)(t.code,{children:"Parameters"})," object is then used to build your ",(0,i.jsx)(t.code,{children:"RaftServer"})," and ",(0,i.jsx)(t.code,{children:"RaftClient"}),"."]}),"\n",(0,i.jsxs)(t.h4,{id:"1-creating-a-grpctlsconfig",children:["1. Creating a ",(0,i.jsx)(t.code,{children:"GrpcTlsConfig"})]}),"\n",(0,i.jsxs)(t.p,{children:["You can create a ",(0,i.jsx)(t.code,{children:"GrpcTlsConfig"})," in two ways:"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"a) From File Paths:"})}),"\n",(0,i.jsx)(t.p,{children:"This is the recommended approach for production environments."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'import org.apache.ratis.grpc.GrpcTlsConfig;\nimport java.io.File;\n\n// ...\n\nFile privateKeyFile = new File("/path/to/your/private.key");\nFile certChainFile = new File("/path/to/your/certificate.crt");\nFile trustStoreFile = new File("/path/to/your/truststore.crt");\nboolean mutualTlsEnabled = true;\n\nGrpcTlsConfig tlsConfig = new GrpcTlsConfig(\n    privateKeyFile, certChainFile, trustStoreFile, mutualTlsEnabled);\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"b) From In-Memory Objects:"})}),"\n",(0,i.jsx)(t.p,{children:"This approach is useful for testing or when you have the certificates and keys available in memory."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"import org.apache.ratis.grpc.GrpcTlsConfig;\nimport java.security.PrivateKey;\nimport java.security.cert.X509Certificate;\nimport java.util.List;\n\n// ...\n\nPrivateKey privateKey = ...; // Your private key\nX509Certificate certChain = ...; // Your certificate chain\nList<X509Certificate> trustStore = ...; // Your trust store\nboolean mutualTlsEnabled = true;\n\nGrpcTlsConfig tlsConfig = new GrpcTlsConfig(\n    privateKey, certChain, trustStore, mutualTlsEnabled);\n"})}),"\n",(0,i.jsxs)(t.h4,{id:"2-setting-the-grpctlsconfig",children:["2. Setting the ",(0,i.jsx)(t.code,{children:"GrpcTlsConfig"})]}),"\n",(0,i.jsxs)(t.p,{children:["Once you have a ",(0,i.jsx)(t.code,{children:"GrpcTlsConfig"})," object, you need to set it on a ",(0,i.jsx)(t.code,{children:"Parameters"})," object. You can then use this ",(0,i.jsx)(t.code,{children:"Parameters"})," object to build your ",(0,i.jsx)(t.code,{children:"RaftServer"})," and ",(0,i.jsx)(t.code,{children:"RaftClient"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"import org.apache.ratis.conf.Parameters;\nimport org.apache.ratis.grpc.GrpcConfigKeys;\nimport org.apache.ratis.server.RaftServer;\n\n// ...\n\nParameters parameters = new Parameters();\nGrpcConfigKeys.Server.setTlsConf(parameters, tlsConfig);\n\nRaftServer server = RaftServer.newBuilder()\n    // ... other builder configurations\n    .setParameters(parameters)\n    .build();\n"})}),"\n",(0,i.jsx)(t.h3,{id:"configuring-tls-for-the-netty-datastream",children:"Configuring TLS for the Netty DataStream"}),"\n",(0,i.jsxs)(t.p,{children:["Configuring TLS for the Netty data stream is very similar to configuring it for gRPC. You create a ",(0,i.jsx)(t.code,{children:"TlsConf"})," object and set it on the ",(0,i.jsx)(t.code,{children:"Parameters"})," object."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"import org.apache.ratis.conf.Parameters;\nimport org.apache.ratis.netty.NettyConfigKeys;\nimport org.apache.ratis.security.TlsConf;\n\n// ...\n\nParameters parameters = new Parameters();\nTlsConf tlsConfig = ...; // Create your TlsConf object\n\nNettyConfigKeys.DataStream.Server.setTlsConf(parameters, tlsConfig);\n"})}),"\n",(0,i.jsx)(t.h3,{id:"mutual-tls-mtls",children:"Mutual TLS (mTLS)"}),"\n",(0,i.jsx)(t.p,{children:"Mutual TLS (mTLS) provides two-way authentication, ensuring that both the client and server are who they say they are. To enable mTLS in Ratis, you must provide a trust store that contains the certificates of the trusted clients and servers."}),"\n",(0,i.jsxs)(t.p,{children:["When creating your ",(0,i.jsx)(t.code,{children:"GrpcTlsConfig"})," or ",(0,i.jsx)(t.code,{children:"TlsConf"}),", you can enable mTLS by setting the ",(0,i.jsx)(t.code,{children:"mutualTls"})," parameter to ",(0,i.jsx)(t.code,{children:"true"})," in the constructor. When mTLS is enabled, the server will authenticate the client, and the client will authenticate the server."]}),"\n",(0,i.jsx)(t.p,{children:"Here is an example of how to enable mTLS:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"// When creating a GrpcTlsConfig from file paths\nGrpcTlsConfig tlsConfig = new GrpcTlsConfig(\n    privateKeyFile, certChainFile, trustStoreFile, true); // mTLS enabled\n\n// When creating a GrpcTlsConfig from in-memory objects\nGrpcTlsConfig tlsConfig = new GrpcTlsConfig(\n    privateKey, certChain, trustStore, true); // mTLS enabled\n"})}),"\n",(0,i.jsx)(t.h2,{id:"configuration-properties",children:"Configuration Properties"}),"\n",(0,i.jsx)(t.p,{children:"Here is a comprehensive list of all security-related configuration properties in Ratis:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Property"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Description"})})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"raft.grpc.tls.conf"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The default TLS configuration for the gRPC transport. This can be overridden by the more specific properties below."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"raft.grpc.server.tls.conf"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The TLS configuration for the gRPC server."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"raft.grpc.client.tls.conf"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The TLS configuration for the gRPC client."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"raft.grpc.admin.tls.conf"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The TLS configuration for the gRPC admin API."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"raft.netty.dataStream.server.tls.conf"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The TLS configuration for the Netty data stream server."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"raft.netty.dataStream.client.tls.conf"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The TLS configuration for the Netty data stream client."})]})]})]}),"\n",(0,i.jsxs)(t.p,{children:["These properties all accept a ",(0,i.jsx)(t.code,{children:"TlsConf"})," or ",(0,i.jsx)(t.code,{children:"GrpcTlsConfig"})," object. You can set them on a ",(0,i.jsx)(t.code,{children:"Parameters"})," object, which is then used to build your ",(0,i.jsx)(t.code,{children:"RaftServer"})," or ",(0,i.jsx)(t.code,{children:"RaftClient"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"pluggable-security-architecture",children:"Pluggable Security Architecture"}),"\n",(0,i.jsxs)(t.p,{children:["Ratis has a pluggable architecture for security, which allows you to integrate with different security systems. The ",(0,i.jsx)(t.code,{children:"Security"})," class is the main entry point for this. You can provide your own implementation of the ",(0,i.jsx)(t.code,{children:"Security"})," class to customize the security of your Ratis cluster."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>a});var n=r(6540);const i={},s=n.createContext(i);function o(e){const t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);