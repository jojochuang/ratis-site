"use strict";(self.webpackChunkratis_tmp=self.webpackChunkratis_tmp||[]).push([[498],{2623:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"developer-guide/statemachine-core-api","title":"StateMachine Core API by Example","description":"This guide provides a practical, example-driven walkthrough of the core StateMachine API. We will build a simple, in-memory key-value store to demonstrate how to implement the essential lifecycle and transaction methods.","source":"@site/docs/developer-guide/statemachine-core-api.md","sourceDirName":"developer-guide","slug":"/developer-guide/statemachine-core-api","permalink":"/ratis-site/docs/developer-guide/statemachine-core-api","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/ratis-site/edit/main/docs/developer-guide/statemachine-core-api.md","tags":[],"version":"current","frontMatter":{"title":"StateMachine Core API by Example"},"sidebar":"tutorialSidebar","previous":{"title":"Advanced StateMachine APIs","permalink":"/ratis-site/docs/developer-guide/statemachine-developer-guide"},"next":{"title":"Listeners (Non-Voting Members)","permalink":"/ratis-site/docs/developer-guide/listeners"}}');var i=n(4848),s=n(8453);const r={title:"StateMachine Core API by Example"},o="StateMachine Core API: A Developer Guide",l={},d=[{value:"The Key-Value Store Example",id:"the-key-value-store-example",level:2},{value:"1. Handling Transactions (<code>applyTransaction</code>)",id:"1-handling-transactions-applytransaction",level:2},{value:"2. Handling Queries (<code>query</code>)",id:"2-handling-queries-query",level:2},{value:"3. Creating Snapshots (<code>takeSnapshot</code>)",id:"3-creating-snapshots-takesnapshot",level:2},{value:"4. Loading from Snapshots (<code>initialize</code> and <code>reinitialize</code>)",id:"4-loading-from-snapshots-initialize-and-reinitialize",level:2},{value:"<code>getLatestSnapshot()</code>",id:"getlatestsnapshot",level:3},{value:"<code>initialize()</code>",id:"initialize",level:3}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"statemachine-core-api-a-developer-guide",children:"StateMachine Core API: A Developer Guide"})}),"\n",(0,i.jsxs)(t.p,{children:["This guide provides a practical, example-driven walkthrough of the core ",(0,i.jsx)(t.code,{children:"StateMachine"})," API. We will build a simple, in-memory key-value store to demonstrate how to implement the essential lifecycle and transaction methods."]}),"\n",(0,i.jsx)(t.h2,{id:"the-key-value-store-example",children:"The Key-Value Store Example"}),"\n",(0,i.jsx)(t.p,{children:"Our state machine will support two basic operations:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"put(key, value)"}),": A write operation to store a key-value pair."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"get(key)"}),": A read-only operation to retrieve a value."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["We'll use a simple ",(0,i.jsx)(t.code,{children:"ConcurrentHashMap"})," to store the data in memory."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"import org.apache.ratis.statemachine.impl.BaseStateMachine;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class KeyValueStateMachine extends BaseStateMachine {\n    private final ConcurrentHashMap<String, String> map = new ConcurrentHashMap<>();\n    // ... method implementations below\n}\n"})}),"\n",(0,i.jsxs)(t.h2,{id:"1-handling-transactions-applytransaction",children:["1. Handling Transactions (",(0,i.jsx)(t.code,{children:"applyTransaction"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"applyTransaction"})," method is the heart of your state machine. It's where you apply committed log entries to update your state. The logic must be deterministic."]}),"\n",(0,i.jsxs)(t.p,{children:["For our key-value store, we'll parse the incoming ",(0,i.jsx)(t.code,{children:"Message"}),", check if it's a ",(0,i.jsx)(t.code,{children:"put"})," operation, and update our map."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@Override\npublic CompletableFuture<Message> applyTransaction(TransactionContext trx) {\n    final LogEntryProto entry = trx.getLogEntry();\n    final String logData = entry.getStateMachineLogEntry().getLogData().toStringUtf8();\n\n    // Parse the command, e.g., "put:key1:value1"\n    final String[] parts = logData.split(":");\n    String result = "SUCCESS";\n\n    if (parts.length >= 3 && "put".equalsIgnoreCase(parts[0])) {\n        map.put(parts[1], parts[2]);\n    } else {\n        result = "INVALID_COMMAND";\n    }\n\n    // Return a success message to the client\n    return CompletableFuture.completedFuture(Message.valueOf(result));\n}\n'})}),"\n",(0,i.jsxs)(t.h2,{id:"2-handling-queries-query",children:["2. Handling Queries (",(0,i.jsx)(t.code,{children:"query"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"query"})," method handles read-only requests. It must not change the state machine's state."]}),"\n",(0,i.jsxs)(t.p,{children:["Here, we'll implement the ",(0,i.jsx)(t.code,{children:"get"})," operation to retrieve a value from our map."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@Override\npublic CompletableFuture<Message> query(Message request) {\n    final String command = request.getContent().toStringUtf8();\n    // Parse the command, e.g., "get:key1"\n    final String[] parts = command.split(":");\n\n    String result = "NOT_FOUND";\n    if (parts.length >= 2 && "get".equalsIgnoreCase(parts[0])) {\n        result = map.getOrDefault(parts[1], "NOT_FOUND");\n    }\n\n    return CompletableFuture.completedFuture(Message.valueOf(result));\n}\n'})}),"\n",(0,i.jsxs)(t.h2,{id:"3-creating-snapshots-takesnapshot",children:["3. Creating Snapshots (",(0,i.jsx)(t.code,{children:"takeSnapshot"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["To prevent the Raft log from growing infinitely, you must implement snapshotting. ",(0,i.jsx)(t.code,{children:"takeSnapshot"})," is called by Ratis to save the current state to a file."]}),"\n",(0,i.jsx)(t.p,{children:"This example serializes the in-memory map to a file within the storage directory provided by Ratis."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@Override\npublic long takeSnapshot() throws IOException {\n    // Get the snapshot directory from the RaftStorage\n    final File snapshotDir = getStateMachineStorage().getSnapshotDir();\n    final long lastAppliedIndex = getLastAppliedTermIndex().getIndex();\n    final File snapshotFile = new File(snapshotDir, "snapshot-" + lastAppliedIndex);\n\n    // Serialize the map to the snapshot file\n    try (ObjectOutputStream out = new ObjectOutputStream(\n        new BufferedOutputStream(new FileOutputStream(snapshotFile)))) {\n        out.writeObject(map);\n    }\n\n    // Return the index of the last log entry included in the snapshot\n    return lastAppliedIndex;\n}\n'})}),"\n",(0,i.jsxs)(t.h2,{id:"4-loading-from-snapshots-initialize-and-reinitialize",children:["4. Loading from Snapshots (",(0,i.jsx)(t.code,{children:"initialize"})," and ",(0,i.jsx)(t.code,{children:"reinitialize"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"When a server starts or restarts, it needs to load its state from the most recent snapshot."}),"\n",(0,i.jsx)(t.h3,{id:"getlatestsnapshot",children:(0,i.jsx)(t.code,{children:"getLatestSnapshot()"})}),"\n",(0,i.jsx)(t.p,{children:"First, Ratis needs to know where the latest snapshot is. You must implement this method to return information about your most recent snapshot."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"@Override\npublic SnapshotInfo getLatestSnapshot() {\n    // Find the latest snapshot file in the snapshot directory\n    // This is a simplified example; a real implementation would need to parse filenames\n    // to find the one with the highest index.\n    return findLatestSnapshotInfo(); // Assumes implementation of this helper method\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"initialize",children:(0,i.jsx)(t.code,{children:"initialize()"})}),"\n",(0,i.jsxs)(t.p,{children:["This method is called on startup. Your implementation should load the state from the snapshot file identified by ",(0,i.jsx)(t.code,{children:"getLatestSnapshot()"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@Override\npublic void initialize(RaftServer server, RaftGroupId groupId, RaftStorage storage) throws IOException {\n    super.initialize(server, groupId, storage);\n    final SnapshotInfo latest = getLatestSnapshot();\n    if (latest != null) {\n        loadSnapshot(latest.getFiles().get(0).getPath().toFile());\n    }\n}\n\n// Helper method to load the map from a file\nprivate void loadSnapshot(File snapshotFile) throws IOException {\n    try (ObjectInputStream in = new ObjectInputStream(\n        new BufferedInputStream(new FileInputStream(snapshotFile)))) {\n        map.clear();\n        map.putAll((ConcurrentHashMap<String, String>) in.readObject());\n    } catch (ClassNotFoundException e) {\n        throw new IOException("Failed to deserialize snapshot", e);\n    }\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"reinitialize()"})," is called after a snapshot has been installed from a leader. For many simple state machines, its implementation can be the same as ",(0,i.jsx)(t.code,{children:"initialize()"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["This guide covers the fundamental methods for creating a functional ",(0,i.jsx)(t.code,{children:"StateMachine"}),'. For more advanced features, see the "StateMachine Developer Guide".']})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var a=n(6540);const i={},s=a.createContext(i);function r(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);